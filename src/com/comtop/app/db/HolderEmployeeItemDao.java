package com.comtop.app.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HOLDER_EMPLOYEE_ITEM.
*/
public class HolderEmployeeItemDao extends AbstractDao<HolderEmployeeItem, Long> {

    public static final String TABLENAME = "HOLDER_EMPLOYEE_ITEM";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HolderEmployeeItemId = new Property(1, String.class, "holderEmployeeItemId", false, "HOLDER_EMPLOYEE_ITEM_ID");
        public final static Property HolderEmployeeId = new Property(2, String.class, "holderEmployeeId", false, "HOLDER_EMPLOYEE_ID");
        public final static Property HolderCertificateId = new Property(3, String.class, "holderCertificateId", false, "HOLDER_CERTIFICATE_ID");
        public final static Property AdmissionStatus = new Property(4, Integer.class, "admissionStatus", false, "ADMISSION_STATUS");
        public final static Property AdmissionTime = new Property(5, java.util.Date.class, "admissionTime", false, "ADMISSION_TIME");
        public final static Property DepartureTime = new Property(6, java.util.Date.class, "departureTime", false, "DEPARTURE_TIME");
    };


    public HolderEmployeeItemDao(DaoConfig config) {
        super(config);
    }
    
    public HolderEmployeeItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'HOLDER_EMPLOYEE_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ASC ," + // 0: id
                "'HOLDER_EMPLOYEE_ITEM_ID' TEXT," + // 1: holderEmployeeItemId
                "'HOLDER_EMPLOYEE_ID' TEXT," + // 2: holderEmployeeId
                "'HOLDER_CERTIFICATE_ID' TEXT," + // 3: holderCertificateId
                "'ADMISSION_STATUS' INTEGER," + // 4: admissionStatus
                "'ADMISSION_TIME' INTEGER," + // 5: admissionTime
                "'DEPARTURE_TIME' INTEGER);"; // 6: departureTime
        // Add Indexes
        sql += "CREATE INDEX IDX_HOLDER_EMPLOYEE_ITEM ON HOLDER_EMPLOYEE_ITEM" +
                " ();";
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HOLDER_EMPLOYEE_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HolderEmployeeItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String holderEmployeeItemId = entity.getHolderEmployeeItemId();
        if (holderEmployeeItemId != null) {
            stmt.bindString(2, holderEmployeeItemId);
        }
 
        String holderEmployeeId = entity.getHolderEmployeeId();
        if (holderEmployeeId != null) {
            stmt.bindString(3, holderEmployeeId);
        }
 
        String holderCertificateId = entity.getHolderCertificateId();
        if (holderCertificateId != null) {
            stmt.bindString(4, holderCertificateId);
        }
 
        Integer admissionStatus = entity.getAdmissionStatus();
        if (admissionStatus != null) {
            stmt.bindLong(5, admissionStatus);
        }
 
        java.util.Date admissionTime = entity.getAdmissionTime();
        if (admissionTime != null) {
            stmt.bindLong(6, admissionTime.getTime());
        }
 
        java.util.Date departureTime = entity.getDepartureTime();
        if (departureTime != null) {
            stmt.bindLong(7, departureTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HolderEmployeeItem readEntity(Cursor cursor, int offset) {
        HolderEmployeeItem entity = new HolderEmployeeItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // holderEmployeeItemId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // holderEmployeeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // holderCertificateId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // admissionStatus
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // admissionTime
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // departureTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HolderEmployeeItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHolderEmployeeItemId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHolderEmployeeId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHolderCertificateId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdmissionStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAdmissionTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setDepartureTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected Long updateKeyAfterInsert(HolderEmployeeItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HolderEmployeeItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
